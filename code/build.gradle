import org.joda.time.LocalDate
import static org.joda.time.DateTimeConstants.*

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "joda-time:joda-time:2.1" 
    }
}
subprojects { 
    task printProjectName << {
        println project.name
    }
}

allprojects {
    repositories {
        mavenCentral()
    }
}

//Add a custom task to a specific project
project(':web') {
    task printTaskNames(dependsOn:':service:printProjectName') << {
       tasks.each {
           println it.name
       }
    }
}

//Import all targets from the ant build as gradle tasks
project(':legacyAnt') {
    ant.importBuild 'build.xml'
}


task zipEverything(type: Zip) {
    from {
        project('service').jar.archivePath
    }
    archiveName='all.zip'
    destinationDir=project.buildDir
}
//Task dependencies
zipEverything.dependsOn(':domain:grails-war')
tasks['zipEverything'].dependsOn ':service:jar'

//Example tasks
task simpleTask << {
    println 'this totally worked!'
}

task projectInfo << {
    println "Project class: ${project.class}"
    println "Project name: ${project.name}"
    println "Build dir: ${project.buildDir}"
}

task taskInfo << {
    project.tasks.each {
        println '*'*30
        println 
"""Name: ${it.name}
Class: ${it.class}"""
        println '*'*30
    }
}


//Task syntax can be somewhat confusing.  Below are some examples of the syntax around tasks
//Declare a task
task taskA
task taskB(type: Zip)

// a task name followed by a closure Configures a task
taskA { 
    dependsOn taskB 
}

//The closure is a configuration block, but it then calls doFirst which adds a step to the task execution
taskA {
    doFirst {
        println "Let's do this!"
    }
}

//calls doLast which adds a step to the task execution
taskA << { println "Done!" }




task weekendTask {
    onlyIf {
        [SATURDAY, SUNDAY].contains(new LocalDate().dayOfWeek().get())
    }
    doLast {
        println 'This happens on weekends'
    }
}

tasks.addRule("Pattern: ping<URL>") { String taskName ->
    if (taskName.startsWith("ping")) {

        def url = taskName - 'ping'
        task "$taskName"(type:Exec) {
            commandLine "ping", '-c', '3', url 
            description "Ping $url"
        }
    }
}

tasks.addRule("Deploy: <ENV>") { String taskName ->
    if (taskName.startsWith("deploy")) {

        def env = taskName.toLowerCase() - 'deploy'
        def urlProperty = "${env}.url"

        if (!project.hasProperty(urlProperty)) throw new TaskInstantiationException("Environment not found - $env")

        def url = project."$urlProperty"
        task "$taskName" << {
            println "deploying to '$env' at '$url'"
        }
    }
}
